variables:
  IS_DEPLOY_AGENT: "is-deploy-agent-${CI_COMMIT_TAG}"


stages:
  - build
  - release

build:
  stage: build
  image: golang:1.19
  when: manual
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - export VERSION=$CI_COMMIT_TAG
    - apt update -y && apt install jq -y
    - pwd
    - ls -alh
    - git config --global http.sslVerify false
    - git config --global user.name ${GIT_USER_NAME}
    - git config --global user.email ${GIT_USER_EMAIL}
    - git remote set-url origin https://${GIT_USER_NAME}:${GIT_LAB_TOKEN}@${GIT_REMOTE_URL}
    - echo $VERSION
    - go build main.go
    - mv main is-deploy-agent
    - tar -zcvf is-deploy-agent-${VERSION}.tar.gz is-deploy-agent
    - export JSON_RETURN=$(curl -k --request POST --header "PRIVATE-TOKEN:${GIT_LAB_TOKEN}" --form "file=@is-deploy-agent-${VERSION}.tar.gz" "${GIT_URL}/api/v4/projects/${CI_PROJECT_ID}/uploads")
    - export FILE_FULL_PATH=$(jq -r .full_path <<< $JSON_RETURN)
    - echo TAG=${VERSION} >> variables.env
    - echo FILE_FULL_PATH=${FILE_FULL_PATH} >> variables.env
  artifacts:
    reports:
      dotenv: ./variables.env

release:
  stage: release
  when: manual
  image: golang:1.19
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: build
      artifacts: true
  script:
    - echo ${CI_COMMIT_TAG}
    - echo ${IS_DEPLOY_AGENT}
    - echo $FILE_FULL_PATH
    - echo $TAG
    - curl -k --header "Content-Type:application/json" --header "PRIVATE-TOKEN:${GIT_LAB_TOKEN}" --data "{ \"name\":\"${TAG}\", \"tag_name\":\"${TAG}\", \"ref\":\"${TAG}\", \"description\":\"Super nice release\", \"assets\":{\"links\":[{\"name\":\"${TAG}\", \"url\":\"${GIT_URL}${FILE_FULL_PATH}\" }] }}" --request POST "${GIT_URL}/api/v4/projects/${CI_PROJECT_ID}/releases"
